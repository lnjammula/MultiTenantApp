// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, user_name
) VALUES (
  $1, $2
)
RETURNING id, first_name, last_name, full_name, is_email_confirmed, email, user_name, role_id, created_by, updated_by, created_timestamp, updated_timestamp, is_archived
`

type CreateUserParams struct {
	Email    string `json:"email"`
	UserName string `json:"user_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.UserName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.IsEmailConfirmed,
		&i.Email,
		&i.UserName,
		&i.RoleID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
		&i.IsArchived,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, full_name, is_email_confirmed, email, user_name, role_id, created_by, updated_by, created_timestamp, updated_timestamp, is_archived FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.IsEmailConfirmed,
		&i.Email,
		&i.UserName,
		&i.RoleID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
		&i.IsArchived,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, full_name, is_email_confirmed, email, user_name, role_id, created_by, updated_by, created_timestamp, updated_timestamp, is_archived FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.IsEmailConfirmed,
			&i.Email,
			&i.UserName,
			&i.RoleID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedTimestamp,
			&i.UpdatedTimestamp,
			&i.IsArchived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set full_name = $2,
role_id = $3
WHERE id = $1
RETURNING id, first_name, last_name, full_name, is_email_confirmed, email, user_name, role_id, created_by, updated_by, created_timestamp, updated_timestamp, is_archived
`

type UpdateUserParams struct {
	ID       int64          `json:"id"`
	FullName sql.NullString `json:"full_name"`
	RoleID   sql.NullInt32  `json:"role_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.FullName, arg.RoleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.IsEmailConfirmed,
		&i.Email,
		&i.UserName,
		&i.RoleID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
		&i.IsArchived,
	)
	return i, err
}
