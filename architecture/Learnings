## Useful links:

https://livebook.manning.com/book/go-web-programming/table-of-contents/
https://dbdiagram.io/ --> Generate SQL scripts & ERD. Also helpful to get & expose documentation for the ERD as a static site (Data Dictionary)

## Udemy/Youtube:
-----------------

https://www.udemy.com/course/backend-master-class-golang-postgresql-kubernetes
https://github.com/techschool/simplebank (with youtube tutorials)

## docker commands:

cheat sheet: https://collabnix.com/docker-cheatsheet/
docker images are available in: https://hub.docker.com/

container is an instance of an image

docker ps (show all running containers)
docker ps -a (show all containers)
docker stop <name-of-container>

---

## --Postgres Docker Image

docker pull postgres:14.3-alpine
docker run --name postgres14 -p 5433:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:14.3-alpine

database migration in Golang: https://github.com/golang-migrate/migrate/tree/master/cmd/migrate
_ brew install golang-migrate
_ migrate create -ext sql -dir ./migrations -seq init_schema (note: ext is extension) \* migrate -path Db/migrations -database "postgres://root:secret@localhost:5433/MultiTenantApp?sslmode=disable" -verbose up

---

## --makefile (macOs):  a handy automation tool. Can be used to automate docker container run steps

## ORM??:
----------

DATABASE/SQL: Plain SQL, Manual Mapping
GORM: Slow
SQLX: middle ground, lengthy code
SQLC: fast & easy (recommended), support for postgres - https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html


Tests:
------

postgres driver: https://github.com/lib/pq
assertion,mocking library: https://github.com/stretchr/testify

DB Management Tool:
-------------------
https://tableplus.com/ --> easy to use DB Management Tool (seriously no crap)

Misc:
------

viper :-> Configuration management (app.env) 
gomock :-> unit test mocking library


Deployment:
-----------

Docker file should be named as Dockerfile
to build a docker file:
---------------------- docker build -t multitenant:latest .

Multistage Dockerfile: 
---------------------
resulting docker image size from above process is ~450 MB, inorder to reduce the size of docker image, we can use multi-stage Dockerfile (which is nothing but just copying the binary file from build stage, which reduces size of image to ~22 MB)

Run docker images:
------------------ 
docker run --name multitenant -p 8080:8080 -e GIN_MODE=release multitenant:latest (issue cannot connect to DB as both docker containers run on different n/w's)

docker run --name multitenant -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE="postgres://root:secret@172.17.0.2:5432/MultiTenantApp?sslmode=disable" multitenant:latest (as Viper user env variables as well)

right way to do is, create a network (so that we don't have to rely on hard coded IP's):
----------------------------------------------------------------------------------------

docker network ls
docker network bridge
docker network create multitenant-network
docker network inspect multitenant-network
docker network connect multitenant-network postgres14

docker run --name multitenant --network multitenant-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE="postgres://root:secret@postgres14:5432/MultiTenantApp?sslmode=disable" multitenant:latest 


docker-compose:
---------------
docker-compose file can be used to control service start-up orders

docker compose up (create containers using docker-compose.yml)

docker compose down (removes containers using docker-compose.yml)


Google cloud Run:
----------------
https://github.com/saiyam1814/cloudrundemos

Hexagonal Architecture:
-----------------------
https://github.com/ashishjuyal/banking


Monitoring Services using:
--------------------------

Prometheus (time series NoSQL DB to store & query metrics): 
----------
* Server will pull instrumentation data from clint: https://prometheus.io/docs/prometheus/latest/getting_started/
* Client will expose metrics via prometheus client library:  https://github.com/prometheus/client_golang/blob/main/examples/gocollector/main.go

Grafanna: Visualization of prometheus metrics
--------
https://grafana.com/docs/grafana/latest/getting-started/getting-started/
https://grafana.com/docs/grafana/latest/datasources/prometheus/


